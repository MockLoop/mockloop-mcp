name: Manual PyPI Publishing

on:
  workflow_dispatch:
    inputs:
      target:
        description: 'Publishing target'
        required: true
        default: 'testpypi'
        type: choice
        options:
          - testpypi
          - pypi
      version:
        description: 'Version to publish (leave empty for latest tag)'
        required: false
        type: string
      skip_tests:
        description: 'Skip test verification'
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  packages: read

jobs:
  validate-inputs:
    name: Validate Inputs
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Determine version
      id: version
      run: |
        if [ -n "${{ github.event.inputs.version }}" ]; then
          VERSION="${{ github.event.inputs.version }}"
          TAG="v${VERSION}"
        else
          TAG=$(git describe --tags --abbrev=0)
          VERSION=${TAG#v}
        fi
        
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "tag=${TAG}" >> $GITHUB_OUTPUT
        echo "Publishing version: ${VERSION} (tag: ${TAG})"

    - name: Verify tag exists
      run: |
        if ! git rev-parse "${{ steps.version.outputs.tag }}" >/dev/null 2>&1; then
          echo "❌ Tag ${{ steps.version.outputs.tag }} does not exist"
          exit 1
        fi
        echo "✅ Tag ${{ steps.version.outputs.tag }} exists"

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: [validate-inputs]
    if: ${{ !github.event.inputs.skip_tests }}
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ needs.validate-inputs.outputs.tag }}

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run tests
      run: |
        pytest tests/ -v --cov=src/mockloop_mcp --cov-report=xml --cov-report=term

  security:
    name: Security Checks
    runs-on: ubuntu-latest
    needs: [validate-inputs]
    if: ${{ !github.event.inputs.skip_tests }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ needs.validate-inputs.outputs.tag }}

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run security checks
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true
        pip-audit --format=json --output=pip-audit-report.json || true

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [validate-inputs, test, security]
    if: always() && needs.validate-inputs.result == 'success' && (needs.test.result == 'success' || needs.test.result == 'skipped') && (needs.security.result == 'success' || needs.security.result == 'skipped')
    
    steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ needs.validate-inputs.outputs.tag }}
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Verify version consistency
      run: |
        PYPROJECT_VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
        if [ "${{ needs.validate-inputs.outputs.version }}" != "$PYPROJECT_VERSION" ]; then
          echo "❌ Version mismatch: tag=${{ needs.validate-inputs.outputs.version }}, pyproject.toml=$PYPROJECT_VERSION"
          exit 1
        fi
        echo "✅ Version consistency verified"

    - name: Build source distribution and wheel
      run: |
        python -m build

    - name: Check distribution
      run: |
        twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-${{ needs.validate-inputs.outputs.version }}
        path: dist/

  publish:
    name: Publish to ${{ github.event.inputs.target }}
    runs-on: ubuntu-latest
    needs: [validate-inputs, build]
    environment: ${{ github.event.inputs.target }}
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-${{ needs.validate-inputs.outputs.version }}
        path: dist/

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install twine
      run: |
        python -m pip install --upgrade pip twine

    - name: Publish to TestPyPI
      if: github.event.inputs.target == 'testpypi'
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        user: __token__
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}

    - name: Publish to PyPI
      if: github.event.inputs.target == 'pypi'
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}

    - name: Create publication summary
      run: |
        echo "## 🎉 Publication Complete" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Package Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Version:** ${{ needs.validate-inputs.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Target:** ${{ github.event.inputs.target }}" >> $GITHUB_STEP_SUMMARY
        if [ "${{ github.event.inputs.target }}" = "pypi" ]; then
          echo "- **PyPI URL:** https://pypi.org/project/mockloop-mcp/${{ needs.validate-inputs.outputs.version }}/" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **TestPyPI URL:** https://test.pypi.org/project/mockloop-mcp/${{ needs.validate-inputs.outputs.version }}/" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Installation" >> $GITHUB_STEP_SUMMARY
        echo '```bash' >> $GITHUB_STEP_SUMMARY
        if [ "${{ github.event.inputs.target }}" = "pypi" ]; then
          echo 'pip install mockloop-mcp==${{ needs.validate-inputs.outputs.version }}' >> $GITHUB_STEP_SUMMARY
        else
          echo 'pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ mockloop-mcp==${{ needs.validate-inputs.outputs.version }}' >> $GITHUB_STEP_SUMMARY
        fi
        echo '```' >> $GITHUB_STEP_SUMMARY

  verify:
    name: Verify Installation
    runs-on: ${{ matrix.os }}
    needs: [validate-inputs, publish]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.10", "3.11", "3.12"]
      fail-fast: false
    
    steps:
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Wait for package propagation
      run: |
        if [ "${{ github.event.inputs.target }}" = "pypi" ]; then
          sleep 120
        else
          sleep 60
        fi

    - name: Install from PyPI
      if: github.event.inputs.target == 'pypi'
      run: |
        python -m pip install mockloop-mcp==${{ needs.validate-inputs.outputs.version }}

    - name: Install from TestPyPI
      if: github.event.inputs.target == 'testpypi'
      run: |
        python -m pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ mockloop-mcp==${{ needs.validate-inputs.outputs.version }}

    - name: Verify installation
      run: |
        mockloop-mcp --version
        python -c "import mockloop_mcp; print('✅ Package import successful on ${{ matrix.os }} with Python ${{ matrix.python-version }}')"

  rollback:
    name: Rollback Instructions
    runs-on: ubuntu-latest
    needs: [validate-inputs, verify]
    if: failure()
    
    steps:
    - name: Create rollback instructions
      run: |
        echo "## ⚠️ Publication Issues Detected" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Rollback Options" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ "${{ github.event.inputs.target }}" = "pypi" ]; then
          echo "**PyPI packages cannot be deleted once published.**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Options:" >> $GITHUB_STEP_SUMMARY
          echo "1. Publish a patch version with fixes" >> $GITHUB_STEP_SUMMARY
          echo "2. Yank the problematic version (users can still install with --force-reinstall)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "To yank version ${{ needs.validate-inputs.outputs.version }}:" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo 'twine yank mockloop-mcp ${{ needs.validate-inputs.outputs.version }}' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
        else
          echo "**TestPyPI packages can be managed more flexibly.**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Fix issues and republish" >> $GITHUB_STEP_SUMMARY
          echo "- TestPyPI is for testing purposes only" >> $GITHUB_STEP_SUMMARY
        fi